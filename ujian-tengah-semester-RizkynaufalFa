{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPq9bl2tAUWN1I/6Tb6EIUb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GyNtpZxndwjc","executionInfo":{"status":"ok","timestamp":1746415413694,"user_tz":-420,"elapsed":48014,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"5b0c5036-cfb9-4025-a11d-4b845b25136a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'ujian-tengah-semester-RizkynaufalF'...\n","remote: Enumerating objects: 28, done.\u001b[K\n","remote: Counting objects: 100% (28/28), done.\u001b[K\n","remote: Compressing objects: 100% (27/27), done.\u001b[K\n","remote: Total 28 (delta 5), reused 9 (delta 0), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (28/28), 385.49 KiB | 7.27 MiB/s, done.\n","Resolving deltas: 100% (5/5), done.\n"]}],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","!git config --global user.email \"rizkynaufal552@gmail.com\"\n","!git config --global user.name \"Rizky Naufal\"\n","\n","!git clone https://@github.com/IET-Polinela/ujian-tengah-semester-RizkynaufalF"]},{"cell_type":"code","source":["%cd /content/ujian-tengah-semester-RizkynaufalF"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JGW7kH6feLWX","executionInfo":{"status":"ok","timestamp":1746415437979,"user_tz":-420,"elapsed":414,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"1f648d35-1e9a-4510-f426-c257af21967d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/ujian-tengah-semester-RizkynaufalF\n"]}]},{"cell_type":"code","source":["%%writefile Preprocessing.py\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from imblearn.over_sampling import SMOTE\n","\n","# Load data\n","df = pd.read_csv('healthcare-dataset-stroke-data.csv')\n","df = df.drop(['id'], axis=1)\n","\n","# Perbaikan warning: isi nilai null di 'bmi' tanpa inplace\n","df['bmi'] = df['bmi'].fillna(df['bmi'].mean())\n","\n","# Encode fitur kategorikal\n","le = LabelEncoder()\n","for col in ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']:\n","    df[col] = le.fit_transform(df[col])\n","\n","# Split fitur dan target\n","X = df.drop('stroke', axis=1)\n","y = df['stroke']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# SMOTE untuk oversampling kelas minoritas\n","smote = SMOTE(random_state=42)\n","X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)\n","\n","# Simpan hasil preprocessing dan SMOTE ke dalam CSV\n","X_train_smote.to_csv('X_train_smote.csv', index=False)\n","X_test.to_csv('X_test.csv', index=False)\n","y_train_smote.to_csv('y_train_smote.csv', index=False, header=True)\n","y_test.to_csv('y_test.csv', index=False, header=True)\n","\n","print(\"Preprocessing selesai dengan SMOTE.\")\n","print(\"Jumlah data latih setelah SMOTE:\", X_train_smote.shape[0])\n","print(\"Jumlah data uji:\", X_test.shape[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kfkNUXfUeM2Z","executionInfo":{"status":"ok","timestamp":1746415449323,"user_tz":-420,"elapsed":29,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"42b5d123-786e-49c2-87fe-46412f9ecba2"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting Preprocessing.py\n"]}]},{"cell_type":"code","source":["!python Preprocessing.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TFC6wtZVeP96","executionInfo":{"status":"ok","timestamp":1746415469540,"user_tz":-420,"elapsed":5845,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"0a986b57-6afe-4f10-eb20-2a87e02c9ff2"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Preprocessing selesai dengan SMOTE.\n","Jumlah data latih setelah SMOTE: 7802\n","Jumlah data uji: 1022\n"]}]},{"cell_type":"code","source":["%%writefile XGBoost.py\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import classification_report, ConfusionMatrixDisplay\n","from xgboost import XGBClassifier\n","from imblearn.over_sampling import SMOTE\n","\n","# Load hasil preprocessing dan SMOTE\n","X_train_smote = pd.read_csv('X_train_smote.csv')\n","X_test  = pd.read_csv('X_test.csv')\n","y_train_smote = pd.read_csv('y_train_smote.csv').values.ravel()  # Ensure y_train is 1D\n","y_test  = pd.read_csv('y_test.csv').values.ravel()    # Ensure y_test is 1D\n","\n","# Inisialisasi dan training XGBoost\n","xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n","xgb.fit(X_train_smote, y_train_smote)\n","y_pred_xgb = xgb.predict(X_test)\n","\n","# Evaluasi XGBoost\n","print(\"=== XGBoost Classification Report setelah SMOTE ===\")\n","print(classification_report(y_test, y_pred_xgb))\n","\n","# Confusion Matrix XGBoost\n","disp_xgb = ConfusionMatrixDisplay.from_predictions(\n","    y_test, y_pred_xgb, cmap='Blues', normalize=None\n",")\n","disp_xgb.ax_.set_title('Confusion Matrix - XGBoost setelah SMOTE')\n","plt.savefig('confusion_matrix_xgb_smote.png')\n","plt.close()\n","\n","# Feature Importance XGBoost\n","i_importances = xgb.feature_importances_\n","feat_names = X_train_smote.columns  # Assuming X_train is a DataFrame with columns\n","imp_xgb = pd.Series(i_importances, index=feat_names).sort_values()\n","plt.figure(figsize=(8,6))\n","imp_xgb.plot(kind='barh')\n","plt.title('Feature Importance - XGBoost setelah SMOTE')\n","plt.xlabel('Importance Score')\n","plt.tight_layout()\n","plt.savefig('feature_importance_xgb_smote.png')\n","plt.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ZtCvxoceTKF","executionInfo":{"status":"ok","timestamp":1746415478130,"user_tz":-420,"elapsed":3,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"4deffea3-f0c3-4671-a8c7-4dd1c7255a0e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting XGBoost.py\n"]}]},{"cell_type":"code","source":["!python XGBoost.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jS115QykeXBV","executionInfo":{"status":"ok","timestamp":1746415499701,"user_tz":-420,"elapsed":8970,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"4fb46af6-17b4-4771-8c10-67e135ddec17"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [03:25:00] WARNING: /workspace/src/learner.cc:740: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  warnings.warn(smsg, UserWarning)\n","=== XGBoost Classification Report setelah SMOTE ===\n","              precision    recall  f1-score   support\n","\n","           0       0.95      0.94      0.94       960\n","           1       0.15      0.16      0.16        62\n","\n","    accuracy                           0.89      1022\n","   macro avg       0.55      0.55      0.55      1022\n","weighted avg       0.90      0.89      0.90      1022\n","\n"]}]},{"cell_type":"code","source":["%%writefile Hyperparameter_Tuning.py\n","from sklearn.model_selection import GridSearchCV\n","from xgboost import XGBClassifier\n","import pandas as pd\n","\n","# Memuat data yang telah diproses sebelumnya\n","X_train_smote = pd.read_csv('X_train_smote.csv')\n","y_train_smote = pd.read_csv('y_train_smote.csv').values.ravel()  # Pastikan y_train adalah 1D\n","X_test = pd.read_csv('X_test.csv')\n","y_test = pd.read_csv('y_test.csv').values.ravel()  # Pastikan y_test adalah 1D\n","\n","# Parameter yang ingin diuji\n","param_grid = {\n","    'max_depth': [3, 5, 7],\n","    'learning_rate': [0.01, 0.1, 0.2],\n","    'n_estimators': [100, 200],\n","    'subsample': [0.8, 1.0],\n","    'colsample_bytree': [0.8, 1.0]\n","}\n","\n","# Inisialisasi model XGBoost tanpa use_label_encoder\n","xgb = XGBClassifier(eval_metric='logloss', random_state=42)\n","\n","# GridSearchCV untuk mencari kombinasi parameter terbaik\n","grid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)\n","grid_search.fit(X_train_smote, y_train_smote)\n","\n","# Menampilkan hasil pencarian grid terbaik\n","print(\"Best Parameters from Grid Search:\", grid_search.best_params_)\n","\n","# Evaluasi model terbaik\n","y_pred_best_xgb = grid_search.best_estimator_.predict(X_test)\n","\n","# Evaluasi XGBoost dengan parameter terbaik\n","from sklearn.metrics import classification_report\n","print(\"=== XGBoost Classification Report dengan Hyperparameter Tuning ===\")\n","print(classification_report(y_test, y_pred_best_xgb))\n","\n","# Confusion Matrix XGBoost\n","from sklearn.metrics import ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","\n","disp_xgb_best = ConfusionMatrixDisplay.from_predictions(\n","    y_test, y_pred_best_xgb, cmap='Blues', normalize=None\n",")\n","disp_xgb_best.ax_.set_title('Confusion Matrix - XGBoost setelah Hyperparameter Tuning')\n","plt.savefig('confusion_matrix_xgb_best.png')\n","plt.close()\n","\n","# Feature Importance XGBoost terbaik\n","i_importances_best = grid_search.best_estimator_.feature_importances_\n","feat_names = X_train_smote.columns  # Assuming X_train is a DataFrame with columns\n","imp_xgb_best = pd.Series(i_importances_best, index=feat_names).sort_values()\n","plt.figure(figsize=(8,6))\n","imp_xgb_best.plot(kind='barh')\n","plt.title('Feature Importance - XGBoost setelah Hyperparameter Tuning')\n","plt.xlabel('Importance Score')\n","plt.tight_layout()\n","plt.savefig('feature_importance_xgb_best.png')\n","plt.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eegPoofyeZwz","executionInfo":{"status":"ok","timestamp":1746415509821,"user_tz":-420,"elapsed":51,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"27221b2d-3d1a-460d-def6-075ed0fba845"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting Hyperparameter_Tuning.py\n"]}]},{"cell_type":"code","source":["!python Hyperparameter_Tuning.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zP0o72xOeeNd","executionInfo":{"status":"ok","timestamp":1746415566541,"user_tz":-420,"elapsed":46959,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"708ac49e-ca20-4790-ce73-6e2fdc4d53a9"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 72 candidates, totalling 216 fits\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.7s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.8s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.9s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.6s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.7s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.7s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=0.8, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.7s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.7s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.9s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.9s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=1.0; total time=   1.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.01, max_depth=7, n_estimators=200, subsample=1.0; total time=   1.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.1, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=0.8; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=100, subsample=1.0; total time=   0.1s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=3, n_estimators=200, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=0.8; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=5, n_estimators=200, subsample=1.0; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=0.8; total time=   0.3s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=100, subsample=1.0; total time=   0.2s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=0.8; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.5s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","[CV] END colsample_bytree=1.0, learning_rate=0.2, max_depth=7, n_estimators=200, subsample=1.0; total time=   0.4s\n","Best Parameters from Grid Search: {'colsample_bytree': 1.0, 'learning_rate': 0.2, 'max_depth': 7, 'n_estimators': 200, 'subsample': 0.8}\n","=== XGBoost Classification Report dengan Hyperparameter Tuning ===\n","              precision    recall  f1-score   support\n","\n","           0       0.95      0.95      0.95       960\n","           1       0.17      0.15      0.16        62\n","\n","    accuracy                           0.90      1022\n","   macro avg       0.56      0.55      0.55      1022\n","weighted avg       0.90      0.90      0.90      1022\n","\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QUxsZyV-eiKi","executionInfo":{"status":"ok","timestamp":1746415643920,"user_tz":-420,"elapsed":22331,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"52f02761-5c9b-4d32-c635-40bc6b5ae8e3"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!cp \"/content/drive/My Drive/Colab Notebooks/UTS1_23758025.ipynb\" \"ujian-tengah-semester-RizkynaufalF\""],"metadata":{"id":"JZQPafg7e_AD","executionInfo":{"status":"ok","timestamp":1746415685312,"user_tz":-420,"elapsed":2017,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["!git add .\n","!git commit -m \"upload Final\"\n","!git push origin main"],"metadata":{"id":"TH4rBv7sfKQQ","executionInfo":{"status":"ok","timestamp":1746415700473,"user_tz":-420,"elapsed":619,"user":{"displayName":"Rizky Naufal","userId":"06357155050855586717"}},"outputId":"40bf1bd8-fb34-4676-cd05-76919a46e8b6","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["On branch main\n","Your branch is up to date with 'origin/main'.\n","\n","nothing to commit, working tree clean\n","Everything up-to-date\n"]}]}]}